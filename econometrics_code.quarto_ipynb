{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Econometrics Code for Simulation\"\n",
        "theme:\n",
        "  light: lux\n",
        "\n",
        "jupyter: python3\n",
        "---"
      ],
      "id": "87ad4b7e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "\n",
        "def pension_fund_simulation():\n",
        "    global df  # Make the DataFrame global so that it can be used in Cell 2\n",
        "\n",
        "    def get_auto_enrolment_rate(year):\n",
        "        \"\"\"\n",
        "        Returns the employee contribution rate (as a decimal)\n",
        "        for a given 'scheme year' following the staged rates:\n",
        "          - Years 1-3: 1.5%\n",
        "          - Years 4-6: 3.0%\n",
        "          - Years 7-9: 4.5%\n",
        "          - Year 10 and after: 6.0%\n",
        "        \"\"\"\n",
        "        if 1 <= year <= 3:\n",
        "            return 0.015\n",
        "        elif 4 <= year <= 6:\n",
        "            return 0.03\n",
        "        elif 7 <= year <= 9:\n",
        "            return 0.045\n",
        "        else:\n",
        "            return 0.06\n",
        "\n",
        "    # Get user inputs\n",
        "    starting_salary = float(input(\"Enter starting salary (€): \"))\n",
        "    salary_increase_rate_early = float(input(\"Enter early salary increase rate (e.g., 0.10 for 10%): \"))\n",
        "    salary_increase_rate_late = float(input(\"Enter late salary increase rate after 5 years (e.g., 0.02 for 2%): \"))\n",
        "    pension_contribution_rate = float(input(\"Enter pension contribution rate for 'CUAN' scenario (e.g., 0.10 for 10%): \"))\n",
        "    increase_contribution_rate = float(input(\"Enter percentage of salary increase allocated to pension for first 5 years (e.g., 0.60 for 60%): \"))\n",
        "    investment_return = float(input(\"Enter annual investment return rate (e.g., 0.07 for 7%): \"))\n",
        "    fee_rate = float(input(\"Enter annual pension fund fee rate (e.g., 0.01 for 1%): \"))\n",
        "    years = int(input(\"Enter number of years to simulate: \"))\n",
        "\n",
        "    # Initialize lists (starting with Year 0)\n",
        "    years_list = [0]\n",
        "    salary_list = [starting_salary]\n",
        "\n",
        "    # Scenario A: \"CUAN\" (increased contributions)\n",
        "    annual_contribution_cuan = pension_contribution_rate * starting_salary\n",
        "    pension_balance_cuan = annual_contribution_cuan\n",
        "    fees_accumulated_cuan = 0\n",
        "\n",
        "    # Scenario B: \"Auto-Enrolment\"\n",
        "    auto_rate = get_auto_enrolment_rate(1)\n",
        "    annual_contribution_auto = auto_rate * starting_salary\n",
        "    pension_balance_auto = annual_contribution_auto\n",
        "    fees_accumulated_auto = 0\n",
        "\n",
        "    # Store initial values\n",
        "    annual_contribution_cuan_list = [annual_contribution_cuan]\n",
        "    annual_contribution_auto_list = [annual_contribution_auto]\n",
        "    pension_balance_cuan_list = [pension_balance_cuan]\n",
        "    pension_balance_auto_list = [pension_balance_auto]\n",
        "    fees_accumulated_cuan_list = [fees_accumulated_cuan]\n",
        "    fees_accumulated_auto_list = [fees_accumulated_auto]\n",
        "    pension_after_fees_cuan_list = [pension_balance_cuan]  # At Year 0, before fees = after fees\n",
        "    pension_after_fees_auto_list = [pension_balance_auto]\n",
        "\n",
        "    current_salary = starting_salary\n",
        "    for yr in range(1, years + 1):\n",
        "        # Increase salary and update CUAN contributions\n",
        "        if yr <= 5:\n",
        "            salary_increase = current_salary * salary_increase_rate_early\n",
        "            additional_contribution = salary_increase * increase_contribution_rate\n",
        "            annual_contribution_cuan += additional_contribution\n",
        "            current_salary *= (1 + salary_increase_rate_early)\n",
        "        else:\n",
        "            current_salary *= (1 + salary_increase_rate_late)\n",
        "            annual_contribution_cuan = max(annual_contribution_cuan, current_salary * pension_contribution_rate)\n",
        "\n",
        "        # Auto-Enrolment: update contribution using staged rate\n",
        "        auto_rate = get_auto_enrolment_rate(yr)\n",
        "        annual_contribution_auto = current_salary * auto_rate\n",
        "\n",
        "        # CUAN scenario: update balance and fees\n",
        "        pension_balance_cuan = (pension_balance_cuan + annual_contribution_cuan) * (1 + investment_return)\n",
        "        fees_paid_cuan = pension_balance_cuan * fee_rate\n",
        "        pension_balance_cuan_after_fees = pension_balance_cuan - fees_paid_cuan\n",
        "        fees_accumulated_cuan += fees_paid_cuan\n",
        "\n",
        "        # Auto-Enrolment scenario: update balance and fees\n",
        "        pension_balance_auto = (pension_balance_auto + annual_contribution_auto) * (1 + investment_return)\n",
        "        fees_paid_auto = pension_balance_auto * fee_rate\n",
        "        pension_balance_auto_after_fees = pension_balance_auto - fees_paid_auto\n",
        "        fees_accumulated_auto += fees_paid_auto\n",
        "\n",
        "        # Append results for this year\n",
        "        years_list.append(yr)\n",
        "        salary_list.append(current_salary)\n",
        "        annual_contribution_cuan_list.append(annual_contribution_cuan)\n",
        "        annual_contribution_auto_list.append(annual_contribution_auto)\n",
        "        pension_balance_cuan_list.append(pension_balance_cuan)\n",
        "        pension_balance_auto_list.append(pension_balance_auto)\n",
        "        fees_accumulated_cuan_list.append(fees_accumulated_cuan)\n",
        "        fees_accumulated_auto_list.append(fees_accumulated_auto)\n",
        "        pension_after_fees_cuan_list.append(pension_balance_cuan_after_fees)\n",
        "        pension_after_fees_auto_list.append(pension_balance_auto_after_fees)\n",
        "\n",
        "    # Create the DataFrame and keep the full table\n",
        "    df = pd.DataFrame({\n",
        "        \"Year\": years_list,\n",
        "        \"Salary (€)\": salary_list,\n",
        "        \"Annual Contribution (€) (CUAN)\": annual_contribution_cuan_list,\n",
        "        \"Annual Contribution (€) (Auto-Enrolment)\": annual_contribution_auto_list,\n",
        "        \"Pension Balance Before Fees (€) (CUAN)\": pension_balance_cuan_list,\n",
        "        \"Pension Balance Before Fees (€) (Auto-Enrolment)\": pension_balance_auto_list,\n",
        "        \"Pension Balance After Fees (€) (CUAN)\": pension_after_fees_cuan_list,\n",
        "        \"Pension Balance After Fees (€) (Auto-Enrolment)\": pension_after_fees_auto_list,\n",
        "        \"Total Fees Earned (€) (CUAN)\": fees_accumulated_cuan_list,\n",
        "        \"Total Fees Earned (€) (Auto-Enrolment)\": fees_accumulated_auto_list\n",
        "    })\n",
        "\n",
        "    pd.options.display.float_format = '{:,.2f}'.format\n",
        "    # Print the full table\n",
        "    print(\"Full Simulation Table:\")\n",
        "    print(df.to_string(index=False))\n",
        "\n",
        "    # Plot the results for interactivity\n",
        "    fig = px.line(\n",
        "        df,\n",
        "        x=\"Year\",\n",
        "        y=[\n",
        "            \"Pension Balance After Fees (€) (CUAN)\",\n",
        "            \"Pension Balance After Fees (€) (Auto-Enrolment)\",\n",
        "            \"Total Fees Earned (€) (CUAN)\",\n",
        "            \"Total Fees Earned (€) (Auto-Enrolment)\"\n",
        "        ],\n",
        "        labels={\"value\": \"Amount (€)\", \"Year\": \"Years\"},\n",
        "        title=\"Pension Balance Growth & Fees Comparison: CUAN vs Auto-Enrolment\"\n",
        "    )\n",
        "    fig.update_layout(yaxis_tickformat=\",\")\n",
        "    fig.show()\n",
        "\n",
        "# Run the simulation cell\n",
        "pension_fund_simulation()"
      ],
      "id": "b2fa65b7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Ensure we have our global DataFrame 'df'\n",
        "if 'df' not in globals():\n",
        "    print(\"Error: Simulation DataFrame 'df' not found. Please run the simulation cell first.\")\n",
        "else:\n",
        "    # Use a copy of df for stats (this does not alter the original)\n",
        "    df_stats = df.copy()\n",
        "\n",
        "    # Compute stats based on the final row\n",
        "    final_cuan = df_stats[\"Pension Balance After Fees (€) (CUAN)\"].iloc[-1]\n",
        "    final_auto = df_stats[\"Pension Balance After Fees (€) (Auto-Enrolment)\"].iloc[-1]\n",
        "    fees_cuan = df_stats[\"Total Fees Earned (€) (CUAN)\"].iloc[-1]\n",
        "    fees_auto = df_stats[\"Total Fees Earned (€) (Auto-Enrolment)\"].iloc[-1]\n",
        "    avg_contribution_cuan = df_stats[\"Annual Contribution (€) (CUAN)\"].mean()\n",
        "    avg_contribution_auto = df_stats[\"Annual Contribution (€) (Auto-Enrolment)\"].mean()\n",
        "\n",
        "    # Compute the yearly balance difference and determine the maximum difference and corresponding year\n",
        "    df_stats[\"Balance Difference (CUAN - Auto)\"] = (\n",
        "        df_stats[\"Pension Balance After Fees (€) (CUAN)\"] - df_stats[\"Pension Balance After Fees (€) (Auto-Enrolment)\"]\n",
        "    )\n",
        "    max_diff = df_stats[\"Balance Difference (CUAN - Auto)\"].max()\n",
        "    year_max_diff = df_stats.loc[df_stats[\"Balance Difference (CUAN - Auto)\"].idxmax(), \"Year\"]\n",
        "\n",
        "    # Relative percentage difference between final balances\n",
        "    relative_diff = (final_cuan - final_auto) / final_auto * 100\n",
        "\n",
        "    # -------------------------------------------------------------------\n",
        "    # DEFINE THE EXTRA VARIABLES BEFORE PRINTING THEM\n",
        "    # -------------------------------------------------------------------\n",
        "\n",
        "    # 1) Compute CAGR (Compound Annual Growth Rate) for CUAN & Auto-Enrolment\n",
        "    #    - initial balance is from row 0, \"After Fees\" columns\n",
        "    initial_cuan = df_stats[\"Pension Balance After Fees (€) (CUAN)\"].iloc[0]\n",
        "    initial_auto = df_stats[\"Pension Balance After Fees (€) (Auto-Enrolment)\"].iloc[0]\n",
        "\n",
        "    #    - number of years is the last \"Year\" value in the DataFrame\n",
        "    sim_years = df_stats[\"Year\"].iloc[-1]  # e.g., if final row is Year 45, sim_years = 45\n",
        "\n",
        "    CAGR_cuan = (final_cuan / initial_cuan) ** (1 / sim_years) - 1 if initial_cuan > 0 else 0\n",
        "    CAGR_auto = (final_auto / initial_auto) ** (1 / sim_years) - 1 if initial_auto > 0 else 0\n",
        "\n",
        "    # 2) Total Contributions\n",
        "    total_contrib_cuan = df_stats[\"Annual Contribution (€) (CUAN)\"].sum()\n",
        "    total_contrib_auto = df_stats[\"Annual Contribution (€) (Auto-Enrolment)\"].sum()\n",
        "\n",
        "    # 3) Contribution Multiplier = Final Balance / Total Contributions\n",
        "    multiplier_cuan = final_cuan / total_contrib_cuan if total_contrib_cuan > 0 else 0\n",
        "    multiplier_auto = final_auto / total_contrib_auto if total_contrib_auto > 0 else 0\n",
        "\n",
        "    # 4) Fees as Percentage of Gross Accumulation\n",
        "    #    - Gross = Final Balance + Total Fees Earned\n",
        "    gross_cuan = final_cuan + fees_cuan\n",
        "    gross_auto = final_auto + fees_auto\n",
        "    fees_pct_cuan = (fees_cuan / gross_cuan) * 100 if gross_cuan > 0 else 0\n",
        "    fees_pct_auto = (fees_auto / gross_auto) * 100 if gross_auto > 0 else 0\n",
        "\n",
        "    # -------------------------------------------------------------------\n",
        "    # NOW PRINT ALL THE STATS\n",
        "    # -------------------------------------------------------------------\n",
        "    print(\"===== Summary Statistics =====\")\n",
        "    print(f\"Final Pension Balance (CUAN):                {final_cuan:,.2f} €\")\n",
        "    print(f\"Final Pension Balance (Auto-Enrolment):      {final_auto:,.2f} €\")\n",
        "    print()\n",
        "    print(f\"Total Fees Earned (CUAN):                    {fees_cuan:,.2f} €\")\n",
        "    print(f\"Total Fees Earned (Auto-Enrolment):          {fees_auto:,.2f} €\")\n",
        "    print()\n",
        "    print(f\"Average Annual Contribution (CUAN):          {avg_contribution_cuan:,.2f} €\")\n",
        "    print(f\"Average Annual Contribution (Auto-Enrolment):{avg_contribution_auto:,.2f} €\")\n",
        "    print()\n",
        "    print(f\"Year with Maximum Balance Difference:        {year_max_diff}\")\n",
        "    print(f\"Maximum Balance Difference (CUAN - Auto):    {max_diff:,.2f} €\")\n",
        "    print(f\"Relative Percentage Difference:              {relative_diff:.2f}%\")\n",
        "    print()\n",
        "    print(f\"CAGR (CUAN):                                {CAGR_cuan*100:.2f}% per year\")\n",
        "    print(f\"CAGR (Auto-Enrolment):                      {CAGR_auto*100:.2f}% per year\")\n",
        "    print()\n",
        "    print(f\"Total Contributions (CUAN):                 {total_contrib_cuan:,.2f} €\")\n",
        "    print(f\"Total Contributions (Auto-Enrolment):       {total_contrib_auto:,.2f} €\")\n",
        "    print()\n",
        "    print(f\"Contribution Multiplier (CUAN):             {multiplier_cuan:.2f}x\")\n",
        "    print(f\"Contribution Multiplier (Auto-Enrolment):   {multiplier_auto:.2f}x\")\n",
        "    print()\n",
        "    print(f\"Fees as Percentage of Gross Accumulation (CUAN):   {fees_pct_cuan:.2f}%\")\n",
        "    print(f\"Fees as Percentage of Gross Accumulation (Auto-Enrolment): {fees_pct_auto:.2f}%\")\n",
        "\n",
        "    # Optionally, display the final row again for visual confirmation\n",
        "    print(\"\\nFinal row from df:\")\n",
        "    print(df.tail(1).to_string(index=False))"
      ],
      "id": "7badd4bc",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/anaconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}