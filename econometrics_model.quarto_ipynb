{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Airgead don Todchaí\"\n",
        "theme:\n",
        "  light: flatly\n",
        "jupyter: python3\n",
        "---"
      ],
      "id": "f74a1825"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import plotly.express as px\n",
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "def pension_fund_simulation():\n",
        "    # Get user input for all parameters\n",
        "    starting_salary = float(input(\"Enter starting salary (€): \"))\n",
        "    salary_increase_rate_early = float(input(\"Enter early salary increase rate (e.g., 0.10 for 10%): \"))\n",
        "    salary_increase_rate_late = float(input(\"Enter late salary increase rate after 5 years (e.g., 0.02 for 2%): \"))\n",
        "    pension_contribution_rate = float(input(\"Enter pension contribution rate (e.g., 0.10 for 10%): \"))\n",
        "    increase_contribution_rate = float(input(\"Enter percentage of salary increase allocated to pension for first 5 years (e.g., 0.60 for 60%): \"))\n",
        "    investment_return = float(input(\"Enter annual investment return rate (e.g., 0.07 for 7%): \"))\n",
        "    fee_rate = float(input(\"Enter annual pension fund fee rate (e.g., 0.01 for 1%): \"))\n",
        "    years = int(input(\"Enter number of years to simulate: \"))\n",
        "\n",
        "    # Initialize lists to store results\n",
        "    years_list = []\n",
        "    salary_list = []\n",
        "    annual_contribution_list = []\n",
        "    pension_balance_list = []\n",
        "    pension_balance_fixed_list = []\n",
        "    fees_accumulated_list = []\n",
        "    pension_after_fees_list = []\n",
        "    pension_after_fees_fixed_list = []\n",
        "\n",
        "    # Initial conditions\n",
        "    salary = starting_salary\n",
        "    pension_balance = pension_contribution_rate * starting_salary  # Initial balance based on contribution rate\n",
        "    pension_balance_fixed = pension_contribution_rate * starting_salary  # Alternative scenario without increased contribution\n",
        "    annual_contribution = pension_contribution_rate * starting_salary\n",
        "    annual_contribution_fixed = pension_contribution_rate * starting_salary\n",
        "    total_fees_accumulated = 0\n",
        "    total_fees_accumulated_fixed = 0\n",
        "\n",
        "    for year in range(1, years + 1):\n",
        "        if year <= 5:\n",
        "            # First 5 years: 10% of original salary + 60% of salary increase\n",
        "            salary_increase = salary * salary_increase_rate_early\n",
        "            additional_contribution = salary_increase * increase_contribution_rate\n",
        "            annual_contribution += additional_contribution\n",
        "            salary *= (1 + salary_increase_rate_early)\n",
        "        else:\n",
        "            # After 5 years: 10% of new salary or last year's contribution, whichever is higher\n",
        "            salary *= (1 + salary_increase_rate_late)\n",
        "            annual_contribution = max(annual_contribution, salary * pension_contribution_rate)\n",
        "\n",
        "        # Fixed contribution scenario: always 10% of salary, no increased contribution\n",
        "        annual_contribution_fixed = salary * pension_contribution_rate\n",
        "\n",
        "        # Apply investment return before fees\n",
        "        pension_balance = (pension_balance + annual_contribution) * (1 + investment_return)\n",
        "        pension_balance_fixed = (pension_balance_fixed + annual_contribution_fixed) * (1 + investment_return)\n",
        "\n",
        "        # Calculate fees\n",
        "        fees_paid = pension_balance * fee_rate  # Fee percentage of total balance\n",
        "        pension_balance_after_fees = pension_balance - fees_paid  # Deduct fees\n",
        "        total_fees_accumulated += fees_paid\n",
        "\n",
        "        fees_paid_fixed = pension_balance_fixed * fee_rate  # Fee percentage for fixed scenario\n",
        "        pension_balance_after_fees_fixed = pension_balance_fixed - fees_paid_fixed  # Deduct fees\n",
        "        total_fees_accumulated_fixed += fees_paid_fixed\n",
        "\n",
        "        # Store results\n",
        "        years_list.append(year)\n",
        "        salary_list.append(salary)\n",
        "        annual_contribution_list.append(annual_contribution)\n",
        "        pension_balance_list.append(pension_balance)\n",
        "        pension_balance_fixed_list.append(pension_balance_fixed)\n",
        "        fees_accumulated_list.append(total_fees_accumulated)\n",
        "        pension_after_fees_list.append(pension_balance_after_fees)\n",
        "        pension_after_fees_fixed_list.append(pension_balance_after_fees_fixed)\n",
        "\n",
        "    # Create DataFrame to display results\n",
        "    df = pd.DataFrame({\n",
        "        \"Year\": years_list,\n",
        "        \"Salary (€)\": salary_list,\n",
        "        \"Annual Contribution (€)\": annual_contribution_list,\n",
        "        \"Pension Balance After Fees (€) (Increased Contributions)\": pension_after_fees_list,\n",
        "        \"Pension Balance After Fees (€) (Fixed Contributions)\": pension_after_fees_fixed_list,\n",
        "        \"Total Fees Earned (€)\": fees_accumulated_list,\n",
        "    })\n",
        "\n",
        "    # Convert values to thousands (€1,000s)\n",
        "    df[\"Pension Balance After Fees (€1,000s) (Increased Contributions)\"] = df[\"Pension Balance After Fees (€) (Increased Contributions)\"] / 1000\n",
        "    df[\"Pension Balance After Fees (€1,000s) (Fixed Contributions)\"] = df[\"Pension Balance After Fees (€) (Fixed Contributions)\"] / 1000\n",
        "    df[\"Total Fees Earned (€1,000s)\"] = df[\"Total Fees Earned (€)\"] / 1000\n",
        "\n",
        "    # Plot using Plotly for interactivity\n",
        "    fig = px.line(df, x=\"Year\",\n",
        "                  y=[\"Pension Balance After Fees (€1,000s) (Increased Contributions)\",\n",
        "                     \"Pension Balance After Fees (€1,000s) (Fixed Contributions)\",\n",
        "                     \"Total Fees Earned (€1,000s)\"],\n",
        "                  labels={\"value\": \"Amount (€1,000s)\", \"Year\": \"Years\"},\n",
        "                  title=\"Pension Balance Growth Comparison: Increased vs Fixed Contributions\")\n",
        "    fig.update_layout(yaxis_tickformat=\",\")  # Format y-axis with comma separators\n",
        "    fig.show()\n",
        "\n",
        "# Run the function to allow user input\n",
        "pension_fund_simulation()"
      ],
      "id": "bb5a44f8",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/anaconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}