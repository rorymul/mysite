{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Airgead don Todchaí\"\n",
        "format: html\n",
        "theme:\n",
        "  light: flatly\n",
        "jupyter: python3\n",
        "params:\n",
        "  starting_salary: 32000\n",
        "  salary_increase_rate_early: 0.10\n",
        "  salary_increase_rate_late: 0.02\n",
        "  pension_contribution_rate: 0.10\n",
        "  increase_contribution_rate: 0.60\n",
        "  investment_return: 0.07\n",
        "  fee_rate: 0.01\n",
        "  years: 30\n",
        "---"
      ],
      "id": "1b36506f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "\n",
        "# Use parameters from Quarto's YAML header\n",
        "def pension_fund_simulation(params):\n",
        "    starting_salary = params['starting_salary']\n",
        "    salary_increase_rate_early = params['salary_increase_rate_early']\n",
        "    salary_increase_rate_late = params['salary_increase_rate_late']\n",
        "    pension_contribution_rate = params['pension_contribution_rate']\n",
        "    increase_contribution_rate = params['increase_contribution_rate']\n",
        "    investment_return = params['investment_return']\n",
        "    fee_rate = params['fee_rate']\n",
        "    years = params['years']\n",
        "\n",
        "    # Initialize lists\n",
        "    years_list, salary_list, annual_contribution_list = [], [], []\n",
        "    pension_balance_list, pension_balance_fixed_list = [], []\n",
        "    fees_accumulated_list, pension_after_fees_list, pension_after_fees_fixed_list = [], [], []\n",
        "\n",
        "    # Initial conditions\n",
        "    salary = starting_salary\n",
        "    pension_balance = pension_contribution_rate * salary\n",
        "    pension_balance_fixed = pension_contribution_rate * salary\n",
        "    annual_contribution = pension_contribution_rate * salary\n",
        "    total_fees_accumulated = 0\n",
        "\n",
        "    for year in range(1, years + 1):\n",
        "        if year <= 5:\n",
        "            salary_increase = salary * salary_increase_rate_early\n",
        "            additional_contribution = salary_increase * increase_contribution_rate\n",
        "            annual_contribution += additional_contribution\n",
        "            salary *= (1 + salary_increase_rate_early)\n",
        "        else:\n",
        "            salary *= (1 + salary_increase_rate_late)\n",
        "            annual_contribution = max(annual_contribution, salary * pension_contribution_rate)\n",
        "\n",
        "        annual_contribution_fixed = salary * pension_contribution_rate\n",
        "\n",
        "        pension_balance = (pension_balance + annual_contribution) * (1 + investment_return)\n",
        "        pension_balance_fixed = (pension_balance_fixed + annual_contribution_fixed) * (1 + investment_return)\n",
        "\n",
        "        fees_paid = pension_balance * fee_rate\n",
        "        pension_balance_after_fees = pension_balance - fees_paid\n",
        "        total_fees_accumulated += fees_paid\n",
        "\n",
        "        fees_paid_fixed = pension_balance_fixed * fee_rate\n",
        "        pension_balance_after_fees_fixed = pension_balance_fixed - fees_paid_fixed\n",
        "\n",
        "        # Store results\n",
        "        years_list.append(year)\n",
        "        salary_list.append(salary)\n",
        "        annual_contribution_list.append(annual_contribution)\n",
        "        pension_balance_list.append(pension_balance)\n",
        "        pension_balance_fixed_list.append(pension_balance_fixed)\n",
        "        fees_accumulated_list.append(total_fees_accumulated)\n",
        "        pension_after_fees_list.append(pension_balance_after_fees)\n",
        "        pension_after_fees_fixed_list.append(pension_balance_after_fees_fixed)\n",
        "\n",
        "    # Create DataFrame\n",
        "    df = pd.DataFrame({\n",
        "        \"Year\": years_list,\n",
        "        \"Salary (€)\": salary_list,\n",
        "        \"Annual Contribution (€)\": annual_contribution_list,\n",
        "        \"Pension Balance After Fees (€1,000s) (Increased Contributions)\": np.array(pension_after_fees_list)/1000,\n",
        "        \"Pension Balance After Fees (€1,000s) (Fixed Contributions)\": np.array(pension_after_fees_fixed_list)/1000,\n",
        "        \"Total Fees Earned (€1,000s)\": np.array(fees_accumulated_list)/1000,\n",
        "    })\n",
        "\n",
        "    # Plot interactive chart\n",
        "    fig = px.line(df, x=\"Year\",\n",
        "                  y=[\"Pension Balance After Fees (€1,000s) (Increased Contributions)\",\n",
        "                     \"Pension Balance After Fees (€1,000s) (Fixed Contributions)\",\n",
        "                     \"Total Fees Earned (€1,000s)\"],\n",
        "                  labels={\"value\": \"Amount (€1,000s)\", \"Year\": \"Years\"},\n",
        "                  title=\"Pension Balance Growth Comparison: Increased vs Fixed Contributions\")\n",
        "\n",
        "    fig.update_layout(yaxis_tickformat=\",\")\n",
        "    fig.show()\n",
        "\n",
        "# Run the function\n",
        "pension_fund_simulation(params)"
      ],
      "id": "bac9eee9",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/anaconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}